{"version":3,"sources":["webpack:///path---cs-hostname-machinename-ipaddress-61cebbc12de698128b53.js","webpack:///./.cache/json/cs-hostname-machinename-ipaddress.json"],"names":["webpackJsonp","346","module","exports","data","markdownRemark","html","frontmatter","date","path","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,y2FAAqvDC,aAAwqCC,KAAA,iBAAAC,KAAA,qCAAAC,MAAA,gDAA2HC","file":"path---cs-hostname-machinename-ipaddress-61cebbc12de698128b53.js","sourcesContent":["webpackJsonp([139934388839461],{\n\n/***/ 346:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>C# : HostName, MachineName and IPAddresses</h1>\\n<p>Host Name and Machine Name are not the same. A Host Name is a name given to a host(e.g. computer or phone) by the Domain Name System(DNS). Therefore, this name is in context with the DNS. For more details have a look <a href=\\\"http://en.wikipedia.org/wiki/Hostname\\\">here</a>.</p>\\n<p>On the other hand, a Machine Name is more in the local context. which is established during system start up and when the name is ready from the registry.</p>\\n<h2>Find the Host Name</h2>\\n<pre><code class=\\\"language-cs\\\">String HostName = System.Net.Dns.GetHostName();\\n</code></pre>\\n<h2>Find the Machine Name</h2>\\n<pre><code class=\\\"language-cs\\\">String MachineName = System.Environment.MachineName;\\n</code></pre>\\n<h2>Find the IPAddress (IPv4)</h2>\\n<p>System.Net.Dns.GetHostName() and \\\"\\\" (Empty String) refer to the same host name.\\n\\\"localhost\\\" refers to the reserved IP addresses 127.0.0.1 in IPv4, or ::1 in IPv6.\\nFor more details about localhost, take a look <a href=\\\"http://en.wikipedia.org/wiki/Localhost\\\">here</a></p>\\n<pre><code class=\\\"language-cs\\\">System.Net.IPAddress IpAddress = System.Net.Dns.GetHostAddresses(\\\"\\\").Single(ipAddressFamily => ipAddressFamily.AddressFamily == AddressFamily.InterNetwork);\\n</code></pre>\\n<p>is the same as</p>\\n<pre><code class=\\\"language-cs\\\">System.Net.IPAddress IpAddress = System.Net.Dns.GetHostAddresses(System.Net.Dns.GetHostName()).Single(ipAddressFamily => ipAddressFamily.AddressFamily == AddressFamily.InterNetwork);\\n</code></pre>\\n<p>but is NOT the same as</p>\\n<pre><code class=\\\"language-cs\\\">System.Net.IPAddress IpAddress = System.Net.Dns.GetHostAddresses(\\\"localhost\\\").Single(ipAddressFamily => ipAddressFamily.AddressFamily == AddressFamily.InterNetwork);\\n</code></pre>\\n<p><i>.Single(ipAddress => ipAddress.AddressFamily == AddressFamily.InterNetwork)</i> is a function which takes a Predicate Delegate as an argument. The predicate determines whether the object to which it is applied to meets the criteria stated in the Predicate. The predicate here is a lambda function/inline function. For e.g. here the predicate checks whether each ipAddress(from AddressList which is returned by System.Net.Dns.GetHostAddress(...)) satisfies the fact that the ipAddress.AddressFamily == AddressFamily.InterNetwork (IPv4). Since we are using \\\"Single\\\" here it means that, it will return only the one which satisfied the condition, if there are more than one which satisfy the condition, it will throw an error.</p>\\n<p>Look <a href=\\\"http://msdn.microsoft.com/en-us/library/system.aspx\\\">here</a> for more of different delegates offered by C#.</p>\\n<p>Look <a href=\\\"http://msdn.microsoft.com/en-us/library/bb397687.aspx\\\">here</a> for more on lambda expressions.</p>\\n<p>Look <a href=\\\"http://msdn.microsoft.com/en-us/library/ms173171%28VS.80%29.aspx\\\">here</a> for more on delegates.</p>\\n<p>More on the power of delegates later ...</p>\",\"frontmatter\":{\"date\":\"March 08, 2010\",\"path\":\"/cs_hostname_machinename_ipaddress\",\"title\":\"C# : HostName, MachineName and IPAddresses\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---cs-hostname-machinename-ipaddress-61cebbc12de698128b53.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>C# : HostName, MachineName and IPAddresses</h1>\\n<p>Host Name and Machine Name are not the same. A Host Name is a name given to a host(e.g. computer or phone) by the Domain Name System(DNS). Therefore, this name is in context with the DNS. For more details have a look <a href=\\\"http://en.wikipedia.org/wiki/Hostname\\\">here</a>.</p>\\n<p>On the other hand, a Machine Name is more in the local context. which is established during system start up and when the name is ready from the registry.</p>\\n<h2>Find the Host Name</h2>\\n<pre><code class=\\\"language-cs\\\">String HostName = System.Net.Dns.GetHostName();\\n</code></pre>\\n<h2>Find the Machine Name</h2>\\n<pre><code class=\\\"language-cs\\\">String MachineName = System.Environment.MachineName;\\n</code></pre>\\n<h2>Find the IPAddress (IPv4)</h2>\\n<p>System.Net.Dns.GetHostName() and \\\"\\\" (Empty String) refer to the same host name.\\n\\\"localhost\\\" refers to the reserved IP addresses 127.0.0.1 in IPv4, or ::1 in IPv6.\\nFor more details about localhost, take a look <a href=\\\"http://en.wikipedia.org/wiki/Localhost\\\">here</a></p>\\n<pre><code class=\\\"language-cs\\\">System.Net.IPAddress IpAddress = System.Net.Dns.GetHostAddresses(\\\"\\\").Single(ipAddressFamily => ipAddressFamily.AddressFamily == AddressFamily.InterNetwork);\\n</code></pre>\\n<p>is the same as</p>\\n<pre><code class=\\\"language-cs\\\">System.Net.IPAddress IpAddress = System.Net.Dns.GetHostAddresses(System.Net.Dns.GetHostName()).Single(ipAddressFamily => ipAddressFamily.AddressFamily == AddressFamily.InterNetwork);\\n</code></pre>\\n<p>but is NOT the same as</p>\\n<pre><code class=\\\"language-cs\\\">System.Net.IPAddress IpAddress = System.Net.Dns.GetHostAddresses(\\\"localhost\\\").Single(ipAddressFamily => ipAddressFamily.AddressFamily == AddressFamily.InterNetwork);\\n</code></pre>\\n<p><i>.Single(ipAddress => ipAddress.AddressFamily == AddressFamily.InterNetwork)</i> is a function which takes a Predicate Delegate as an argument. The predicate determines whether the object to which it is applied to meets the criteria stated in the Predicate. The predicate here is a lambda function/inline function. For e.g. here the predicate checks whether each ipAddress(from AddressList which is returned by System.Net.Dns.GetHostAddress(...)) satisfies the fact that the ipAddress.AddressFamily == AddressFamily.InterNetwork (IPv4). Since we are using \\\"Single\\\" here it means that, it will return only the one which satisfied the condition, if there are more than one which satisfy the condition, it will throw an error.</p>\\n<p>Look <a href=\\\"http://msdn.microsoft.com/en-us/library/system.aspx\\\">here</a> for more of different delegates offered by C#.</p>\\n<p>Look <a href=\\\"http://msdn.microsoft.com/en-us/library/bb397687.aspx\\\">here</a> for more on lambda expressions.</p>\\n<p>Look <a href=\\\"http://msdn.microsoft.com/en-us/library/ms173171%28VS.80%29.aspx\\\">here</a> for more on delegates.</p>\\n<p>More on the power of delegates later ...</p>\",\"frontmatter\":{\"date\":\"March 08, 2010\",\"path\":\"/cs_hostname_machinename_ipaddress\",\"title\":\"C# : HostName, MachineName and IPAddresses\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/cs-hostname-machinename-ipaddress.json\n// module id = 346\n// module chunks = 139934388839461"],"sourceRoot":""}