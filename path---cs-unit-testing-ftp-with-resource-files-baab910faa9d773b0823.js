webpackJsonp([0xaec32ce9266b],{347:function(e,t){e.exports={data:{markdownRemark:{html:'<h1>C# &#x26; Visual Studio: FTP Methods, Testing by Creating Resource Files and Using their Streams</h1>\n<p>I had come across a scenario where I needed to store certain files to a certain location on a server. This certain location, basically acts like a shelf to hold these files. Just like a neatly arranged shelf, all these files were arranged within a directory structure. </p>\n<p>On the Server, I created an FTP site listening at the default port (Port 21). This FTP Server was mapped to the location of my interest.</p>\n<p>If you don’t know how to create an FTP Site, please look <a href="http://learn.iis.net/page.aspx/301/creating-a-new-ftp-site/">here</a>.</p>\n<p>In Visual Studio, through my C# code I wrote a class which provided two public methods:</p>\n<pre><code class="language-cs">public String WriteFtpMyFileToServer(Stream fileStream)\n\npublic Boolean DeleteFtpMyFileFromServer(String fileNamePlusPath)\n</code></pre>\n<p>There were private helper methods as well to remove repeated coding (good practice).</p>\n<p>Following is a code snippet from method (1) which would write the file to location of interest:</p>\n<pre><code class="language-cs">/// &#x3C;summary>\n/// Method to Transfer the file via FTP\n/// &#x3C;/summary>\n/// &#x3C;param name="fileStream">The stream on the file to be sent/// &#x3C;returns>String&#x3C;/returns>\npublic String WriteFtpMyFileToServer (Stream fileStream)\n{\n    .\n    .\n    .\n    .\n    .\n    //Get the FTP site Uri from ConfigurationManager in string including filepath\n    Uri ftpUri = new Uri(String.Format(CultureInfo.CurrentCulture,"{0}{1}",ConfigurationManager.AppSettings["FtpSite"],filePath));\n \n    //Creates an FTP web request\n    FtpWebRequest request = (FtpWebRequest)WebRequest.Create(ftpUri);\n \n    //Setting the request method\n    request.Method = WebRequestMethods.Ftp.UploadFile;\n \n    //Get the request stream\n    Stream ftpStream = request.GetRequestStream();\n \n    //Copy from fileStream to ftpStream\n    int bufferLength = 2048; // 2K\n    byte[] buffer = new byte[bufferLength];\n    int count = 0;\n    int readBytes = 0;\n    //Byte by Byte\n    do\n    {\n        readBytes = fileStream.Read(buffer, 0, bufferLength);\n        ftpStream.Write(buffer, 0, readBytes);\n        count += readBytes;\n    }while (readBytes != 0);\n \n    // Close both the streams\n    fileStream.Close();\n    fileStream.Dispose();\n    ftpStream.Close();\n \n    // Send the file and Get Response\n    FtpWebResponse response = (FtpWebResponse)request.GetResponse();\n \n    //Check the result of our upload and see if successful\n    if (response.StatusCode == FtpStatusCode.ClosingData)\n    {\n        // Close the ftp session\n        response.Close();\n        fileSentSuccessfully = true;\n    }\n \n    .\n    .\n    .\n    //Return String: Message of what happened or Null\n    .\n    .\n    .\n}\n</code></pre>\n<p>It\'s always a good thing to keep constant Uris (in this case FTP Site) in .config files. This is due to the fact that these Uris may change depending on your environments. It may be different in production, development and test environments. You can use the ConfigurationManager to access from these .config files.</p>\n<p>Following is a code snippet from method (2) which would delete the file from the location of interest:</p>\n<pre><code class="language-cs">/// &#x3C;summary>\n/// This method deletes the specified File via FTP\n/// &#x3C;/summary>\n/// &#x3C;param name=" fileNamePlusPathOnServer ">filepath followed by name/// &#x3C;returns>bool sucess/failure&#x3C;/returns>\n \npublic Boolean DeleteFtpMyFileFromServer (String fileNamePlusPathOnServer)\n{\n    .\n    .\n    .\n    //Creating Uri from string\n    Uri ftpUri = new Uri(String.Format(CultureInfo.CurrentCulture,"{0}{1}",ConfigurationManager.AppSettings["FtpSite"],fileNamePlusPathOnServer));\n \n    //Creates an FTP web request\n    FtpWebRequest request = (FtpWebRequest)WebRequest.Create(ftpUri);\n \n    //Method delete file\n    request.Method = WebRequestMethods.Ftp.DeleteFile;\n \n    // Send the command and Get Response\n    FtpWebResponse response = (FtpWebResponse)request.GetResponse();\n \n    //Check the result of our upload and see if successful\n    if (response.StatusCode == FtpStatusCode.FileActionOK)\n    {\n        // Close the ftp session\n        response.Close();\n \n        return true;\n    }\n \n    return false;\n}\n</code></pre>\n<p>Personally, I have always believed that throwing exceptions is a really good practice. Even though you don’t see any exceptions thrown in the code snippets above, you can always add code to throw exceptions to validate the parameters to the methods and for any other failure. This really helps to convey messages from the callee class to the caller class about what went wrong.</p>\n<p>When this class is live, we would expect a real file stream to be passed to method (1). <i>But how will you write unit tests for these methods ?</i></p>\n<p>Writing unit tests for each possible scenario in your methods is the best way for documenting and portraying what is expected from the method you just wrote. It validates your logic in the method, checks whether the method indeed returns what you expect and if the method is working the way you want it to. Overall, it makes the code more robust and reliable. It also helps other developers to understand what you intended to do in the method. Test Driven Development (TDD) and Code Coverage are really good techniques for the same.</p>\n<p>If you don’t know what TDD is, please look <a href="http://en.wikipedia.org/wiki/Test-driven_development">here</a>.</p>\n<p>If you don’t know what Code Coverage is, please look <a href="http://en.wikipedia.org/wiki/Code_coverage">here</a>.</p>\n<p>To write a test for method (1), I needed to create a file in my test and pass its stream to method (1). It made no sense to create a file each time locally at a certain path and use it for test purposes. This is due to the fact that the underlying directory structure may change from host to host, depending on where the tests are run. Each test should be written independent of the location, environment and of other tests.</p>\n<p>This is where resource files come in. A resource file can be any data such as text files, images, audio or video that you application might require. Once a resource file is added to the project, it always stays with the project just like other .cs files (your code).</p>\n<p>In my test project, I created a folder within the project called “Resources” and added a text file to it with a test name called “TestFile.txt”. This file had some junk data in it. I clicked on the file and in the Properties dialog below it, changed the Build Action to “Embedded Resource”. </p>\n<p>To get the stream of this file in your test class:</p>\n<pre><code class="language-cs">/// &#x3C;summary>\n/// Summary description for Your Test Class\n/// &#x3C;/summary>\n \n[TestClass]\npublic class YouTestClassName\n{\n    #region Private Variables\n    .\n    .\n    .\n    //Assembly giving reference to Resource File\n    private static Assembly _thisAssembly;\n    //File Stream of the file to be transferred (Resource Text File)\n    private static Stream _TestFileStream;\n    .\n    .\n    .\n    #endregion Private Variables\n \n    #region Test Context\n \n    /// &#x3C;summary>\n    ///Gets or sets the test context which provides\n    ///information about and functionality for the current test run.\n    ///&#x3C;/summary>\n    public TestContext TestContext { get; set; }\n \n    #endregion Test Context\n \n    #region Additional test attributes\n \n    // You can use the following additional attributes as you write your tests:\n    //\n    // Use ClassInitialize to run code before running the first test in the class\n    [ClassInitialize]\n    public static void MyClassInitialize(TestContext testContext) \n    {\n        .\n        .\n        .\n        //Getting the assembly\n        _thisAssembly = Assembly.GetExecutingAssembly();\n        .\n        .\n        .\n    }\n \n    // Use ClassCleanup to run code after all tests in a class have run\n    [ClassCleanup]\n    public static void MyClassCleanup() \n    {\n        .\n        .\n        .\n    }\n \n    //// Use TestInitialize to run code before running each test \n    //[TestInitialize()]\n    //public void MyTestInitialize() \n    //{ \n \n    //}\n \n    //// Use TestCleanup to run code after each test has run\n    //[TestCleanup()]\n    //public void MyTestCleanup() \n    //{\n \n    //}\n \n    #endregion Additional test attributes\n \n    /// &#x3C;summary>\n    /// This method tests the FtpFile method successfully\n    /// &#x3C;/summary>\n    [TestMethod]\n    public void FtpFileTest_Success()\n   {\n        //ARRANGE\n        //Getting the file stream\n        if (_thisAssembly != null)\n        {\n            //Getting the stream from resource file\n            _TestFileStream = _thisAssembly.GetManifestResourceStream("Namespace.TestFile.txt");\n        }\n \n        //ACT\n        //Calling the WriteFtpFileToServer method (METHOD(1))\n        //_sut is the instance of the class which provides these methods\n        _returnString = _sut.WriteFtpFileToServer(_TestFileStream);\n \n        //ASSERT\n        Assert.IsNotNull(_returnString);\n    }\n    .\n    .\n    .\n    //More tests\n    .\n    .\n    .\n}\n</code></pre>\n<p>This way, the tests can be run on any machine without worrying about the underlying directory structure of the machine.</p>',frontmatter:{date:"April 26, 2010",path:"/cs_unit_testing_ftp_with_resource_files",title:"C# & Visual Studio: FTP Methods, Testing by Creating Resource Files and Using their Streams",keywords:"",description:"",image:"",image_alt:"",image_width:"",image_height:""}}},pathContext:{}}}});
//# sourceMappingURL=path---cs-unit-testing-ftp-with-resource-files-baab910faa9d773b0823.js.map